package IC.Parser;

import IC.AST.*;
import java.util.ArrayList;
import java.util.List;
import IC.DataTypes;
import java_cup.runtime.Symbol;


/* supports error recovery :
	will try to recover after reading an invalid method, recovers at semicolon 
*/

parser code {:

	/* this list contains a list of Syntax Errors that were found during parsing */
	public List<SyntaxError> errors = new ArrayList<SyntaxError>();

	/* handle syntax error */
	public void syntax_error(Symbol cur_token) {

	    /* notify the compiler that an error has occured, and set the error list */
	    IC.Compiler.SetSyntaxErrors(errors);
		
		/* bugged method */
		expected_token_ids(); expected_token_ids(); expected_token_ids();
		List<Integer> lst_tokens = expected_token_ids();
		
		/* add the new error */
		errors.add(new SyntaxError((Token)cur_token, lst_tokens));
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws SyntaxError
	{
		/* we could not handle error recovery, throw a Syntax Error exception */
		throw errors.get(0);
	}
	
	

:}

// Symbol list (terminals and non-terminals), same as Parser.cup

/* ids, store as Token, we also need the line numbers */
terminal Token ID;          
terminal Token CLASSID;

/* keywords , some require line number*/
terminal EXTENDS, STATIC, IF, ELSE, WHILE;
terminal LENGTH, CLASS;
terminal Integer RETURN, BREAK, CONTINUE, THIS, NEW; /* need line number */
terminal Integer INT, BOOL, STRING, VOID;            /* need line number */

/* literals */
terminal Token INTEGER;				   /* Token to contain both the value and line number */
terminal Token STRING_LITERAL;         /* Token to contain both the value and line number */
terminal Integer FALSE, NULL, TRUE;    /* Integer for line number */

/* punctuation */
terminal LP, RP, CRP, SQUARERB, SQUARELB, DOT, COMMA;
terminal Integer SEMCOL;
terminal Integer CLP;                  /* Integer for line number */

/* operators */
terminal ADD, MINUS, MULT, DIV, MOD, LESSTHAN, LESSTHANEQ, GREATERTHAN, GREATERTHANEQ, EQ;
terminal NOTEQ, AND, OR, NOT, ASSIGN;

terminal UMINUS, ARR_ACCESS, METHOD_CALL;


nonterminal Program program;
nonterminal ICClass       lib_class;
nonterminal Method        method;
nonterminal List<Method>  method_list_opt;
nonterminal List<Method>  method_list;
nonterminal Type     type;
nonterminal Type     return_type;

nonterminal Formal   formal;
nonterminal List<Formal> comma_formal_list;
nonterminal List<Formal> formal_list;
nonterminal List<Formal> formal_list_opt;
nonterminal empty;
nonterminal Token library;   /* this nontermianl handles the class name */



program ::= lib_class:c
	{: List<ICClass> classes = new ArrayList<ICClass>();
	   classes.add(c);
	   RESULT = new Program(classes);
	:}
;

lib_class ::= CLASS library:class_token CLP method_list_opt:lst CRP
	{:
		RESULT = new ICClass(class_token.getLine(), (String)class_token.getValue(), new ArrayList<Field>(), lst);
	:}
;


/* wrapper rule, only purpose it to handle invalid class name, should be "Library" */

library ::= CLASSID:class_token
	{: 
		String name = (String)class_token.getValue();
		if(!name.equals("Library"))
		{
			/* notify the compiler that an error has occured, and set the error list */
			IC.Compiler.SetSyntaxErrors(errors);
			/* build the error object */
			SyntaxError name_error = new SyntaxError(class_token, new ArrayList<Integer>());		
			name_error.setErrorDescription("expected 'Library',  but found 'CLASS_ID'");
			/* add the error to the list */
			errors.add(name_error);
		}
		
		RESULT = class_token;
	:}
;

method_list_opt ::= empty
	{: RESULT = new ArrayList<Method>(); :}
	| method_list:lst
	{: RESULT = lst; :}
;

method_list ::= method:m
	{: RESULT = new ArrayList<Method>(); RESULT.add(m); :}
	| method_list:lst method:m
	{: lst.add(m); RESULT = lst; :}
;


method ::= STATIC return_type:t ID:id_token LP formal_list_opt:formals RP SEMCOL
	{:
		RESULT = new LibraryMethod(t, (String)id_token.getValue(), formals);
	:}
	| error SEMCOL
	
;

/* represents formal list (non empty) */
formal_list ::= formal:f comma_formal_list:lst
	{: RESULT = new ArrayList<Formal>();
	   RESULT.add(f);
	   for(Formal formal : lst)
	   {
	   		RESULT.add(formal);
	   }
	:}
	| formal:f
	{: RESULT =  new ArrayList<Formal>(); RESULT.add(f); :}
	
;

/* optional formal list, used in method definition */
formal_list_opt ::= formal_list:lst
	{: RESULT = lst; :}
	| empty
	{: RESULT = new ArrayList<Formal>(); :}
;

formal ::= type:t ID:token_id
	{: RESULT = new Formal(t, (String)token_id.getValue()); :}
;

/* formals seperated by commas, used in formal list */
comma_formal_list ::= COMMA formal:f
	{: RESULT = new ArrayList<Formal>(); RESULT.add(f); :}
	| comma_formal_list:lst COMMA formal:f
	{: lst.add(f); RESULT = lst; :}
	| comma_formal_list:lst error formal:f
	{: :}
;

/* method return type, can be void or type */	
return_type ::= type:t 
	{: RESULT = t; :}
	| VOID:line
	{: RESULT = new PrimitiveType(line, DataTypes.VOID); :}
;

/* represents types */
type ::= INT:line
	{: RESULT = new PrimitiveType( line, DataTypes.INT); :}
	| BOOL:line
	{: RESULT = new PrimitiveType( line, DataTypes.BOOLEAN); :}
	| STRING:line
	{: RESULT = new PrimitiveType( line, DataTypes.STRING); :}
	| CLASSID:class_token
	{: RESULT = new UserType( class_token.getLine(), (String)class_token.getValue()); :}
	| type:t SQUARELB SQUARERB
	{: RESULT = t; RESULT.incrementDimension(); :}
	| type:t error SQUARERB
	{: :}
;


empty ::= 
	{: :}
;