
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package IC.Parser;

import IC.AST.*;
import java.util.ArrayList;
import java.util.List;
import IC.DataTypes;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LibParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public LibParser() {super();}

  /** Constructor which sets the default scanner. */
  public LibParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LibParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\003\000\002\002\004\000\002\003" +
    "\007\000\002\016\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\004\000\002\004\011\000" +
    "\002\004\004\000\002\013\004\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\011\004\000\002\012" +
    "\004\000\002\012\005\000\002\012\005\000\002\010\003" +
    "\000\002\010\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\005\000\002" +
    "\007\005\000\002\015\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\014\006\001\002\000\004\002\001\001" +
    "\002\000\004\002\057\001\002\000\004\005\007\001\002" +
    "\000\004\043\ufffe\001\002\000\004\043\011\001\002\000" +
    "\010\003\012\007\013\035\uffe7\001\002\000\004\042\056" +
    "\001\002\000\014\005\022\022\030\023\026\024\023\025" +
    "\027\001\002\000\004\035\ufffd\001\002\000\004\035\021" +
    "\001\002\000\010\003\012\007\013\035\ufffc\001\002\000" +
    "\010\003\ufffb\007\ufffb\035\ufffb\001\002\000\010\003\ufffa" +
    "\007\ufffa\035\ufffa\001\002\000\004\002\uffff\001\002\000" +
    "\010\003\uffea\004\uffea\037\uffea\001\002\000\010\003\uffeb" +
    "\004\uffeb\037\uffeb\001\002\000\010\003\044\004\uffef\037" +
    "\043\001\002\000\004\004\031\001\002\000\010\003\uffec" +
    "\004\uffec\037\uffec\001\002\000\004\004\uffee\001\002\000" +
    "\010\003\uffed\004\uffed\037\uffed\001\002\000\004\033\032" +
    "\001\002\000\014\005\022\022\030\023\026\024\023\034" +
    "\uffe7\001\002\000\006\034\ufff6\041\047\001\002\000\004" +
    "\034\ufff4\001\002\000\010\003\044\004\042\037\043\001" +
    "\002\000\004\034\040\001\002\000\004\034\ufff5\001\002" +
    "\000\004\042\041\001\002\000\010\003\ufff9\007\ufff9\035" +
    "\ufff9\001\002\000\010\003\ufff3\034\ufff3\041\ufff3\001\002" +
    "\000\004\036\046\001\002\000\004\036\045\001\002\000" +
    "\010\003\uffe8\004\uffe8\037\uffe8\001\002\000\010\003\uffe9" +
    "\004\uffe9\037\uffe9\001\002\000\012\005\022\022\030\023" +
    "\026\024\023\001\002\000\010\003\052\034\ufff7\041\051" +
    "\001\002\000\012\005\022\022\030\023\026\024\023\001" +
    "\002\000\012\005\022\022\030\023\026\024\023\001\002" +
    "\000\010\003\ufff0\034\ufff0\041\ufff0\001\002\000\010\003" +
    "\ufff1\034\ufff1\041\ufff1\001\002\000\010\003\ufff2\034\ufff2" +
    "\041\ufff2\001\002\000\010\003\ufff8\007\ufff8\035\ufff8\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\016\005\014\006" +
    "\015\015\013\001\001\000\002\001\001\000\006\007\023" +
    "\010\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\034\011\032\013\036\014\035\015\033\001\001\000\004" +
    "\012\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\034" +
    "\011\054\001\001\000\002\001\001\000\006\007\034\011" +
    "\053\001\001\000\006\007\034\011\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LibParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LibParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LibParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/* this list contains a list of Syntax Errors that were found during parsing */
	public List<SyntaxError> errors = new ArrayList<SyntaxError>();

	/* handle syntax error */
	public void syntax_error(Symbol cur_token) {

	    /* notify the compiler that an error has occured, and set the error list */
	    IC.Compiler.SetSyntaxErrors(errors);
		
		/* bugged method */
		expected_token_ids(); expected_token_ids(); expected_token_ids();
		List<Integer> lst_tokens = expected_token_ids();
		
		/* add the new error */
		errors.add(new SyntaxError((Token)cur_token, lst_tokens));
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws SyntaxError
	{
		/* we could not handle error recovery, throw a Syntax Error exception */
		throw errors.get(0);
	}
	
	



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LibParser$actions {
  private final LibParser parser;

  /** Constructor */
  CUP$LibParser$actions(LibParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LibParser$do_action_part00000000(
    int                        CUP$LibParser$act_num,
    java_cup.runtime.lr_parser CUP$LibParser$parser,
    java.util.Stack            CUP$LibParser$stack,
    int                        CUP$LibParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LibParser$result;

      /* select the action based on the action number */
      switch (CUP$LibParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= lib_class 
            {
              Program RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 List<ICClass> classes = new ArrayList<ICClass>();
	   classes.add(c);
	   RESULT = new Program(classes);
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		RESULT = start_val;
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LibParser$parser.done_parsing();
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lib_class ::= CLASS library CLP method_list_opt CRP 
            {
              ICClass RESULT =null;
		int class_tokenleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).left;
		int class_tokenright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).right;
		Token class_token = (Token)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		List<Method> lst = (List<Method>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		
		RESULT = new ICClass(class_token.getLine(), (String)class_token.getValue(), new ArrayList<Field>(), lst);
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("lib_class",1, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // library ::= CLASSID 
            {
              Token RESULT =null;
		int class_tokenleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int class_tokenright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Token class_token = (Token)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 
		String name = (String)class_token.getValue();
		if(!name.equals("Library"))
		{
			/* notify the compiler that an error has occured, and set the error list */
			IC.Compiler.SetSyntaxErrors(errors);
			/* build the error object */
			SyntaxError name_error = new SyntaxError(class_token, new ArrayList<Integer>());		
			name_error.setErrorDescription("expected 'Library',  but found 'CLASS_ID'");
			/* add the error to the list */
			errors.add(name_error);
		}
		
		RESULT = class_token;
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("library",12, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method_list_opt ::= empty 
            {
              List<Method> RESULT =null;
		 RESULT = new ArrayList<Method>(); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("method_list_opt",3, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method_list_opt ::= method_list 
            {
              List<Method> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		List<Method> lst = (List<Method>)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("method_list_opt",3, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method_list ::= method 
            {
              List<Method> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new ArrayList<Method>(); RESULT.add(m); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("method_list",4, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_list ::= method_list method 
            {
              List<Method> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		List<Method> lst = (List<Method>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 lst.add(m); RESULT = lst; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("method_list",4, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method ::= STATIC return_type ID LP formal_list_opt RP SEMCOL 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).value;
		
		RESULT = new LibraryMethod(t, (String)id_token.getValue(), formals);
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("method",2, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-6)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method ::= error SEMCOL 
            {
              Method RESULT =null;

              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("method",2, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal_list ::= formal comma_formal_list 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		List<Formal> lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new ArrayList<Formal>();
	   RESULT.add(f);
	   for(Formal formal : lst)
	   {
	   		RESULT.add(formal);
	   }
	
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("formal_list",9, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_list ::= formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT =  new ArrayList<Formal>(); RESULT.add(f); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("formal_list",9, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_list_opt ::= formal_list 
            {
              List<Formal> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		List<Formal> lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("formal_list_opt",10, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_list_opt ::= empty 
            {
              List<Formal> RESULT =null;
		 RESULT = new ArrayList<Formal>(); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("formal_list_opt",10, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal ::= type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		int token_idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int token_idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Token token_id = (Token)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new Formal(t, (String)token_id.getValue()); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("formal",7, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comma_formal_list ::= COMMA formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new ArrayList<Formal>(); RESULT.add(f); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("comma_formal_list",8, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comma_formal_list ::= comma_formal_list COMMA formal 
            {
              List<Formal> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).right;
		List<Formal> lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 lst.add(f); RESULT = lst; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("comma_formal_list",8, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comma_formal_list ::= comma_formal_list error formal 
            {
              List<Formal> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).right;
		List<Formal> lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("comma_formal_list",8, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // return_type ::= type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = t; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("return_type",6, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // return_type ::= VOID 
            {
              Type RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new PrimitiveType(line, DataTypes.VOID); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("return_type",6, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= INT 
            {
              Type RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new PrimitiveType( line, DataTypes.INT); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= BOOL 
            {
              Type RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new PrimitiveType( line, DataTypes.BOOLEAN); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= STRING 
            {
              Type RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new PrimitiveType( line, DataTypes.STRING); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= CLASSID 
            {
              Type RESULT =null;
		int class_tokenleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int class_tokenright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Token class_token = (Token)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new UserType( class_token.getLine(), (String)class_token.getValue()); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= type SQUARELB SQUARERB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).value;
		 RESULT = t; RESULT.incrementDimension(); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= type error SQUARERB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).value;
		 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // empty ::= 
            {
              Object RESULT =null;
		 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("empty",11, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LibParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LibParser$do_action(
    int                        CUP$LibParser$act_num,
    java_cup.runtime.lr_parser CUP$LibParser$parser,
    java.util.Stack            CUP$LibParser$stack,
    int                        CUP$LibParser$top)
    throws java.lang.Exception
    {
              return CUP$LibParser$do_action_part00000000(
                               CUP$LibParser$act_num,
                               CUP$LibParser$parser,
                               CUP$LibParser$stack,
                               CUP$LibParser$top);
    }
}

}
