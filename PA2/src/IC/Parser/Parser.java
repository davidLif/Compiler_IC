
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package IC.Parser;

import IC.AST.*;
import java.util.ArrayList;
import java.util.List;
import IC.LiteralTypes;
import IC.DataTypes;
import IC.BinaryOps;
import IC.UnaryOps;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\010" +
    "\000\002\004\007\000\002\004\004\000\002\007\003\000" +
    "\002\007\004\000\002\007\003\000\002\007\004\000\002" +
    "\011\006\000\002\011\005\000\002\011\004\000\002\012" +
    "\004\000\002\012\005\000\002\006\003\000\002\006\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\005\000\002\013\003\000\002" +
    "\013\003\000\002\005\013\000\002\005\012\000\002\005" +
    "\012\000\002\005\011\000\002\005\011\000\002\005\012" +
    "\000\002\005\005\000\002\005\005\000\002\014\004\000" +
    "\002\015\004\000\002\015\005\000\002\016\004\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\003\000\002\020\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\004\000\002\022\006\000\002\022\004\000" +
    "\002\022\005\000\002\022\004\000\002\022\011\000\002" +
    "\022\007\000\002\022\007\000\002\022\004\000\002\022" +
    "\004\000\002\022\005\000\002\022\004\000\002\022\007" +
    "\000\002\023\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\006\000\002\024\007\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\004" +
    "\000\002\024\004\000\002\024\003\000\002\024\005\000" +
    "\002\026\003\000\002\026\005\000\002\026\006\000\002" +
    "\034\002\000\002\033\007\000\002\033\010\000\002\032" +
    "\010\000\002\032\006\000\002\032\007\000\002\032\005" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\004\000\002\031\004\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\010\002\uffa7\003\006\014\010\001\002\000" +
    "\010\002\001\003\006\014\010\001\002\000\004\002\320" +
    "\001\002\000\004\014\317\001\002\000\004\002\uffff\001" +
    "\002\000\004\005\012\001\002\000\010\002\ufffe\003\ufffe" +
    "\014\ufffe\001\002\000\006\006\013\043\uffa7\001\002\000" +
    "\004\005\316\001\002\000\004\043\016\001\002\000\004" +
    "\043\ufff0\001\002\000\022\003\031\005\032\007\023\022" +
    "\020\023\022\024\026\025\025\035\027\001\002\000\022" +
    "\003\ufff9\005\ufff9\007\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\035\ufff9\001\002\000\026\003\uffee\004\uffee\005\uffee" +
    "\007\uffee\022\uffee\023\uffee\024\uffee\025\uffee\035\uffee\037" +
    "\uffee\001\002\000\022\003\ufff7\005\ufff7\007\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\035\ufff7\001\002\000\026\003" +
    "\uffed\004\uffed\005\uffed\007\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\035\uffed\037\uffed\001\002\000\014\005\032\022" +
    "\020\023\022\024\026\025\305\001\002\000\022\003\031" +
    "\005\032\007\023\022\020\023\022\024\026\025\025\035" +
    "\302\001\002\000\004\004\270\001\002\000\026\003\uffec" +
    "\004\uffec\005\uffec\007\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\035\uffec\037\uffec\001\002\000\010\002\ufffb\003\ufffb" +
    "\014\ufffb\001\002\000\006\004\041\037\035\001\002\000" +
    "\014\005\032\022\020\023\022\024\026\035\033\001\002" +
    "\000\026\003\uffeb\004\uffeb\005\uffeb\007\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\035\uffeb\037\uffeb\001\002\000\014" +
    "\005\032\007\037\022\020\023\022\024\026\001\002\000" +
    "\024\003\ufff3\005\ufff3\007\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\035\ufff3\037\035\001\002\000\004\036\036\001" +
    "\002\000\026\003\uffea\004\uffea\005\uffea\007\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\035\uffea\037\uffea\001\002\000" +
    "\022\003\uffe1\005\uffe1\007\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\035\uffe1\001\002\000\024\003\uffe0\005\uffe0\007" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\035\uffe0\037\035" +
    "\001\002\000\010\033\045\041\042\042\044\001\002\000" +
    "\004\004\267\001\002\000\006\041\264\042\265\001\002" +
    "\000\022\003\ufff4\005\ufff4\007\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\035\ufff4\001\002\000\014\005\032\022\020" +
    "\023\022\024\026\034\uffa7\001\002\000\006\034\uffdb\041" +
    "\260\001\002\000\004\034\uffd9\001\002\000\006\004\256" +
    "\037\035\001\002\000\004\034\053\001\002\000\004\034" +
    "\uffda\001\002\000\004\043\054\001\002\000\060\003\104" +
    "\004\074\005\060\010\073\012\062\015\067\016\101\017" +
    "\056\020\075\021\106\022\020\023\022\024\026\026\107" +
    "\027\076\030\102\031\111\032\071\033\061\035\070\043" +
    "\065\045\103\061\066\001\002\000\042\037\uffc1\040\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1" +
    "\062\253\001\002\000\004\042\252\001\002\000\040\037" +
    "\143\040\147\044\142\045\134\046\137\047\146\050\136" +
    "\051\151\052\135\053\144\054\152\055\141\056\140\057" +
    "\133\060\153\001\002\000\010\004\uffeb\037\uffeb\040\124" +
    "\001\002\000\032\004\074\005\122\020\075\021\106\026" +
    "\107\027\076\030\102\031\111\032\071\033\061\045\103" +
    "\061\066\001\002\000\004\033\244\001\002\000\006\004" +
    "\242\037\035\001\002\000\050\034\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\044\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\057\uffa0\060\uffa0\001\002\000\060\003\104\004" +
    "\074\005\060\010\073\012\062\015\067\016\101\017\056" +
    "\020\075\021\106\022\020\023\022\024\026\026\107\027" +
    "\076\030\102\031\111\032\071\033\061\035\237\043\065" +
    "\045\103\061\066\001\002\000\032\004\074\005\122\020" +
    "\075\021\106\026\107\027\076\030\102\031\111\032\071" +
    "\033\061\045\103\061\066\001\002\000\034\004\074\005" +
    "\122\020\075\021\106\026\107\027\076\030\102\031\111" +
    "\032\071\033\061\042\234\045\103\061\066\001\002\000" +
    "\022\003\uffe4\005\uffe4\007\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\035\uffe4\001\002\000\050\034\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\001\002\000\050\034\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\001\002\000" +
    "\004\033\220\001\002\000\054\033\214\034\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\062\uffaa\001\002\000" +
    "\050\034\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\001\002\000\050\034\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\001\002\000\060\003\104\004\074\005\060" +
    "\010\073\012\062\015\067\016\101\017\056\020\075\021" +
    "\106\022\020\023\022\024\026\026\107\027\076\030\102" +
    "\031\111\032\071\033\061\035\212\043\065\045\103\061" +
    "\066\001\002\000\060\003\uffd5\004\uffd5\005\uffd5\010\uffd5" +
    "\012\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\035\uffd5\043\uffd5\045\uffd5\061\uffd5\001" +
    "\002\000\004\042\211\001\002\000\050\034\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\001\002\000\032\004" +
    "\074\005\122\020\075\021\106\026\107\027\076\030\102" +
    "\031\111\032\071\033\061\045\103\061\066\001\002\000" +
    "\004\042\207\001\002\000\050\034\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\060\uffac\001\002\000\012\005\115\022" +
    "\020\023\022\024\026\001\002\000\050\034\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\001\002\000\042\037" +
    "\uffc0\040\uffc0\042\114\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\001\002\000\050\034\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\001\002\000\060\003" +
    "\uffd6\004\uffd6\005\uffd6\010\uffd6\012\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\043\uffd6\045\uffd6\061\uffd6\001\002\000\060\003\uffd8\004" +
    "\uffd8\005\uffd8\010\uffd8\012\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\043\uffd8" +
    "\045\uffd8\061\uffd8\001\002\000\062\003\uffd2\004\uffd2\005" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\043\uffd2" +
    "\045\uffd2\061\uffd2\001\002\000\006\033\205\037\uffeb\001" +
    "\002\000\004\037\117\001\002\000\034\004\074\005\122" +
    "\020\075\021\106\026\107\027\076\030\102\031\111\032" +
    "\071\033\061\036\036\045\103\061\066\001\002\000\050" +
    "\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\001" +
    "\002\000\042\036\204\037\143\040\147\044\142\045\134" +
    "\046\137\047\146\050\136\051\151\052\135\053\144\054" +
    "\152\055\141\056\140\057\133\060\153\001\002\000\004" +
    "\040\124\001\002\000\050\034\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\001\002\000\004\004\125\001\002" +
    "\000\004\033\126\001\002\000\034\004\074\005\122\020" +
    "\075\021\106\026\107\027\076\030\102\031\111\032\071" +
    "\033\061\034\130\045\103\061\066\001\002\000\044\034" +
    "\uff9e\037\143\040\147\041\150\044\142\045\134\046\137" +
    "\047\146\050\136\051\151\052\135\053\144\054\152\055" +
    "\141\056\140\057\133\060\153\001\002\000\050\034\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\001\002\000" +
    "\004\034\132\001\002\000\050\034\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\060\uffa5\001\002\000\032\004\074\005" +
    "\122\020\075\021\106\026\107\027\076\030\102\031\111" +
    "\032\071\033\061\045\103\061\066\001\002\000\032\004" +
    "\074\005\122\020\075\021\106\026\107\027\076\030\102" +
    "\031\111\032\071\033\061\045\103\061\066\001\002\000" +
    "\032\004\074\005\122\020\075\021\106\026\107\027\076" +
    "\030\102\031\111\032\071\033\061\045\103\061\066\001" +
    "\002\000\032\004\074\005\122\020\075\021\106\026\107" +
    "\027\076\030\102\031\111\032\071\033\061\045\103\061" +
    "\066\001\002\000\032\004\074\005\122\020\075\021\106" +
    "\026\107\027\076\030\102\031\111\032\071\033\061\045" +
    "\103\061\066\001\002\000\032\004\074\005\122\020\075" +
    "\021\106\026\107\027\076\030\102\031\111\032\071\033" +
    "\061\045\103\061\066\001\002\000\032\004\074\005\122" +
    "\020\075\021\106\026\107\027\076\030\102\031\111\032" +
    "\071\033\061\045\103\061\066\001\002\000\032\004\074" +
    "\005\122\020\075\021\106\026\107\027\076\030\102\031" +
    "\111\032\071\033\061\045\103\061\066\001\002\000\032" +
    "\004\074\005\122\020\075\021\106\026\107\027\076\030" +
    "\102\031\111\032\071\033\061\045\103\061\066\001\002" +
    "\000\032\004\074\005\122\020\075\021\106\026\107\027" +
    "\076\030\102\031\111\032\071\033\061\045\103\061\066" +
    "\001\002\000\006\034\uff9d\041\167\001\002\000\032\004" +
    "\074\005\122\020\075\021\106\026\107\027\076\030\102" +
    "\031\111\032\071\033\061\045\103\061\066\001\002\000" +
    "\006\004\160\013\161\001\002\000\032\004\074\005\122" +
    "\020\075\021\106\026\107\027\076\030\102\031\111\032" +
    "\071\033\061\045\103\061\066\001\002\000\032\004\074" +
    "\005\122\020\075\021\106\026\107\027\076\030\102\031" +
    "\111\032\071\033\061\045\103\061\066\001\002\000\032" +
    "\004\074\005\122\020\075\021\106\026\107\027\076\030" +
    "\102\031\111\032\071\033\061\045\103\061\066\001\002" +
    "\000\032\004\074\005\122\020\075\021\106\026\107\027" +
    "\076\030\102\031\111\032\071\033\061\045\103\061\066" +
    "\001\002\000\050\034\uffaf\036\uffaf\037\143\040\147\041" +
    "\uffaf\042\uffaf\044\142\045\134\046\137\047\146\050\136" +
    "\051\151\052\135\053\144\054\152\055\141\056\140\057" +
    "\133\060\uffaf\001\002\000\050\034\uffb3\036\uffb3\037\143" +
    "\040\147\041\uffb3\042\uffb3\044\142\045\134\046\137\047" +
    "\146\050\136\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\001\002\000\050\034\uffb6\036" +
    "\uffb6\037\143\040\147\041\uffb6\042\uffb6\044\142\045\134" +
    "\046\137\047\146\050\136\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002\000\044" +
    "\034\uff9c\037\143\040\147\041\uff9c\044\142\045\134\046" +
    "\137\047\146\050\136\051\151\052\135\053\144\054\152" +
    "\055\141\056\140\057\133\060\153\001\002\000\054\033" +
    "\162\034\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\062\uffa9\001\002\000\050\034\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\001\002\000\034\004\074\005\122" +
    "\020\075\021\106\026\107\027\076\030\102\031\111\032" +
    "\071\033\061\034\163\045\103\061\066\001\002\000\050" +
    "\034\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\001" +
    "\002\000\004\034\165\001\002\000\050\034\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\001\002\000\050\034" +
    "\uffb8\036\uffb8\037\143\040\147\041\uffb8\042\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\001\002" +
    "\000\032\004\074\005\122\020\075\021\106\026\107\027" +
    "\076\030\102\031\111\032\071\033\061\045\103\061\066" +
    "\001\002\000\044\034\uff9b\037\143\040\147\041\uff9b\044" +
    "\142\045\134\046\137\047\146\050\136\051\151\052\135" +
    "\053\144\054\152\055\141\056\140\057\133\060\153\001" +
    "\002\000\050\034\uffb4\036\uffb4\037\143\040\147\041\uffb4" +
    "\042\uffb4\044\142\045\134\046\137\047\146\050\136\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4" +
    "\060\uffb4\001\002\000\042\036\173\037\143\040\147\044" +
    "\142\045\134\046\137\047\146\050\136\051\151\052\135" +
    "\053\144\054\152\055\141\056\140\057\133\060\153\001" +
    "\002\000\052\034\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\062\uffa8\001\002\000\050\034\uffbb\036\uffbb\037" +
    "\143\040\147\041\uffbb\042\uffbb\044\uffbb\045\uffbb\046\137" +
    "\047\146\050\136\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\001\002\000\050\034\uffb2" +
    "\036\uffb2\037\143\040\147\041\uffb2\042\uffb2\044\142\045" +
    "\134\046\137\047\146\050\136\051\151\052\135\053\144" +
    "\054\152\055\uffb2\056\uffb2\057\uffb2\060\uffb2\001\002\000" +
    "\050\034\uffb1\036\uffb1\037\143\040\147\041\uffb1\042\uffb1" +
    "\044\142\045\134\046\137\047\146\050\136\051\151\052" +
    "\135\053\144\054\152\055\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\001\002\000\050\034\uffb9\036\uffb9\037\143\040\147\041" +
    "\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\001\002\000\050\034\uffb7\036\uffb7\037\143" +
    "\040\147\041\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\001\002\000\050\034\uffb5\036" +
    "\uffb5\037\143\040\147\041\uffb5\042\uffb5\044\142\045\134" +
    "\046\137\047\146\050\136\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002\000\050" +
    "\034\uffba\036\uffba\037\143\040\147\041\uffba\042\uffba\044" +
    "\uffba\045\uffba\046\137\047\146\050\136\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\001" +
    "\002\000\050\034\uffb0\036\uffb0\037\143\040\147\041\uffb0" +
    "\042\uffb0\044\142\045\134\046\137\047\146\050\136\051" +
    "\151\052\135\053\144\054\152\055\141\056\140\057\uffb0" +
    "\060\uffb0\001\002\000\050\034\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\001\002\000\004\034\206\001\002" +
    "\000\050\034\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\001\002\000\060\003\uffd4\004\uffd4\005\uffd4\010\uffd4" +
    "\012\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\035\uffd4\043\uffd4\045\uffd4\061\uffd4\001" +
    "\002\000\050\034\uffae\036\uffae\037\143\040\147\041\uffae" +
    "\042\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\001\002\000\062\003\uffcc\004\uffcc\005\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\043\uffcc\045\uffcc" +
    "\061\uffcc\001\002\000\022\003\uffe6\005\uffe6\007\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\035\uffe6\001\002\000\060" +
    "\003\uffd7\004\uffd7\005\uffd7\010\uffd7\012\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\035" +
    "\uffd7\043\uffd7\045\uffd7\061\uffd7\001\002\000\034\004\074" +
    "\005\122\020\075\021\106\026\107\027\076\030\102\031" +
    "\111\032\071\033\061\034\215\045\103\061\066\001\002" +
    "\000\050\034\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060" +
    "\uffa1\001\002\000\004\034\217\001\002\000\050\034\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\001\002\000" +
    "\032\004\074\005\122\020\075\021\106\026\107\027\076" +
    "\030\102\031\111\032\071\033\061\045\103\061\066\001" +
    "\002\000\042\034\222\037\143\040\147\044\142\045\134" +
    "\046\137\047\146\050\136\051\151\052\135\053\144\054" +
    "\152\055\141\056\140\057\133\060\153\001\002\000\054" +
    "\004\074\005\060\010\073\012\062\015\067\016\101\017" +
    "\056\020\075\021\106\022\020\023\022\024\026\026\107" +
    "\027\076\030\102\031\111\032\071\033\061\043\065\045" +
    "\103\061\066\001\002\000\006\004\227\037\035\001\002" +
    "\000\062\003\uffce\004\uffce\005\uffce\010\uffce\011\225\012" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\035\uffce\043\uffce\045\uffce\061\uffce\001\002" +
    "\000\054\004\074\005\060\010\073\012\062\015\067\016" +
    "\101\017\056\020\075\021\106\022\020\023\022\024\026" +
    "\026\107\027\076\030\102\031\111\032\071\033\061\043" +
    "\065\045\103\061\066\001\002\000\062\003\uffcf\004\uffcf" +
    "\005\uffcf\010\uffcf\011\uffcf\012\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf\043" +
    "\uffcf\045\uffcf\061\uffcf\001\002\000\004\062\230\001\002" +
    "\000\032\004\074\005\122\020\075\021\106\026\107\027" +
    "\076\030\102\031\111\032\071\033\061\045\103\061\066" +
    "\001\002\000\042\037\143\040\147\042\232\044\142\045" +
    "\134\046\137\047\146\050\136\051\151\052\135\053\144" +
    "\054\152\055\141\056\140\057\133\060\153\001\002\000" +
    "\062\003\uffc8\004\uffc8\005\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\035\uffc8\043\uffc8\045\uffc8\061\uffc8\001\002\000" +
    "\042\037\143\040\147\042\235\044\142\045\134\046\137" +
    "\047\146\050\136\051\151\052\135\053\144\054\152\055" +
    "\141\056\140\057\133\060\153\001\002\000\062\003\uffd0" +
    "\004\uffd0\005\uffd0\010\uffd0\011\uffd0\012\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035" +
    "\uffd0\043\uffd0\045\uffd0\061\uffd0\001\002\000\062\003\uffd1" +
    "\004\uffd1\005\uffd1\010\uffd1\011\uffd1\012\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035" +
    "\uffd1\043\uffd1\045\uffd1\061\uffd1\001\002\000\050\034\uffad" +
    "\036\uffad\037\143\040\147\041\uffad\042\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\001\002\000" +
    "\062\003\uffc9\004\uffc9\005\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\035\uffc9\043\uffc9\045\uffc9\061\uffc9\001\002\000" +
    "\060\003\104\004\074\005\060\010\073\012\062\015\067" +
    "\016\101\017\056\020\075\021\106\022\020\023\022\024" +
    "\026\026\107\027\076\030\102\031\111\032\071\033\061" +
    "\035\241\043\065\045\103\061\066\001\002\000\062\003" +
    "\uffca\004\uffca\005\uffca\010\uffca\011\uffca\012\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\035\uffca\043\uffca\045\uffca\061\uffca\001\002\000\006\042" +
    "\243\062\230\001\002\000\060\003\uffc7\004\uffc7\005\uffc7" +
    "\010\uffc7\012\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\035\uffc7\043\uffc7\045\uffc7\061" +
    "\uffc7\001\002\000\032\004\074\005\122\020\075\021\106" +
    "\026\107\027\076\030\102\031\111\032\071\033\061\045" +
    "\103\061\066\001\002\000\042\034\246\037\143\040\147" +
    "\044\142\045\134\046\137\047\146\050\136\051\151\052" +
    "\135\053\144\054\152\055\141\056\140\057\133\060\153" +
    "\001\002\000\054\004\074\005\060\010\073\012\062\015" +
    "\067\016\101\017\056\020\075\021\106\022\020\023\022" +
    "\024\026\026\107\027\076\030\102\031\111\032\071\033" +
    "\061\043\065\045\103\061\066\001\002\000\062\003\uffcd" +
    "\004\uffcd\005\uffcd\010\uffcd\011\uffcd\012\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\035" +
    "\uffcd\043\uffcd\045\uffcd\061\uffcd\001\002\000\042\034\251" +
    "\037\143\040\147\044\142\045\134\046\137\047\146\050" +
    "\136\051\151\052\135\053\144\054\152\055\141\056\140" +
    "\057\133\060\153\001\002\000\050\034\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\001\002\000\062\003\uffcb" +
    "\004\uffcb\005\uffcb\010\uffcb\011\uffcb\012\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035" +
    "\uffcb\043\uffcb\045\uffcb\061\uffcb\001\002\000\032\004\074" +
    "\005\122\020\075\021\106\026\107\027\076\030\102\031" +
    "\111\032\071\033\061\045\103\061\066\001\002\000\042" +
    "\037\143\040\147\042\255\044\142\045\134\046\137\047" +
    "\146\050\136\051\151\052\135\053\144\054\152\055\141" +
    "\056\140\057\133\060\153\001\002\000\062\003\uffd3\004" +
    "\uffd3\005\uffd3\010\uffd3\011\uffd3\012\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3" +
    "\043\uffd3\045\uffd3\061\uffd3\001\002\000\006\034\uffdf\041" +
    "\uffdf\001\002\000\006\034\uffdc\041\262\001\002\000\012" +
    "\005\032\022\020\023\022\024\026\001\002\000\006\034" +
    "\uffde\041\uffde\001\002\000\012\005\032\022\020\023\022" +
    "\024\026\001\002\000\006\034\uffdd\041\uffdd\001\002\000" +
    "\004\004\266\001\002\000\022\003\ufff5\005\ufff5\007\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\035\ufff5\001\002\000" +
    "\006\041\ufff1\042\ufff1\001\002\000\006\041\ufff2\042\ufff2" +
    "\001\002\000\004\033\271\001\002\000\014\005\032\022" +
    "\020\023\022\024\026\034\uffa7\001\002\000\004\034\273" +
    "\001\002\000\004\043\274\001\002\000\060\003\104\004" +
    "\074\005\060\010\073\012\062\015\067\016\101\017\056" +
    "\020\075\021\106\022\020\023\022\024\026\026\107\027" +
    "\076\030\102\031\111\032\071\033\061\035\275\043\065" +
    "\045\103\061\066\001\002\000\022\003\uffe3\005\uffe3\007" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\035\uffe3\001\002" +
    "\000\060\003\104\004\074\005\060\010\073\012\062\015" +
    "\067\016\101\017\056\020\075\021\106\022\020\023\022" +
    "\024\026\026\107\027\076\030\102\031\111\032\071\033" +
    "\061\035\277\043\065\045\103\061\066\001\002\000\022" +
    "\003\uffe5\005\uffe5\007\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\035\uffe5\001\002\000\022\003\ufff8\005\ufff8\007\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\035\ufff8\001\002\000" +
    "\022\003\ufff6\005\ufff6\007\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\035\ufff6\001\002\000\010\002\ufffc\003\ufffc\014" +
    "\ufffc\001\002\000\006\004\uffe9\037\035\001\002\000\004" +
    "\004\306\001\002\000\004\004\uffe8\001\002\000\004\033" +
    "\307\001\002\000\014\005\032\022\020\023\022\024\026" +
    "\034\uffa7\001\002\000\004\034\311\001\002\000\004\043" +
    "\312\001\002\000\060\003\104\004\074\005\060\010\073" +
    "\012\062\015\067\016\101\017\056\020\075\021\106\022" +
    "\020\023\022\024\026\026\107\027\076\030\102\031\111" +
    "\032\071\033\061\035\313\043\065\045\103\061\066\001" +
    "\002\000\022\003\uffe2\005\uffe2\007\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\035\uffe2\001\002\000\060\003\104\004" +
    "\074\005\060\010\073\012\062\015\067\016\101\017\056" +
    "\020\075\021\106\022\020\023\022\024\026\026\107\027" +
    "\076\030\102\031\111\032\071\033\061\035\315\043\065" +
    "\045\103\061\066\001\002\000\022\003\uffe7\005\uffe7\007" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\035\uffe7\001\002" +
    "\000\004\043\uffef\001\002\000\010\002\ufffa\003\ufffa\014" +
    "\ufffa\001\002\000\004\002\000\001\002\000\010\002\ufffd" +
    "\003\ufffd\014\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\012\002\004\003\003\004\010\034\006\001" +
    "\001\000\004\004\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\013\034\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\016\007" +
    "\023\010\027\011\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\302\013\303\001\001\000\010\005\277\010\027\011\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\033\001\001\000\002" +
    "\001\001\000\004\010\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\047\014\045" +
    "\016\051\017\050\034\046\001\001\000\004\015\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\010\062\020" +
    "\076\021\112\022\111\023\077\024\056\025\104\026\054" +
    "\027\107\032\063\033\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\024\247\025\104\026\117\027\122\032\063\033\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\010\062\020\237\021\112\022\111\023\077\024" +
    "\056\025\104\026\054\027\107\032\063\033\071\001\001" +
    "\000\016\024\235\025\104\026\117\027\122\032\063\033" +
    "\071\001\001\000\016\024\232\025\104\026\117\027\122" +
    "\032\063\033\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\010\062\021" +
    "\212\022\111\023\077\024\056\025\104\026\054\027\107" +
    "\032\063\033\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\024\207\025\104\026\117" +
    "\027\122\032\063\033\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\120\025\104\026\117\027\122\032" +
    "\063\033\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\024\126\025\104\026\117\027\122" +
    "\030\130\032\063\033\071\001\001\000\004\031\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\024\202\025\104\026\117\027\122\032\063\033" +
    "\071\001\001\000\016\024\201\025\104\026\117\027\122" +
    "\032\063\033\071\001\001\000\016\024\200\025\104\026" +
    "\117\027\122\032\063\033\071\001\001\000\016\024\177" +
    "\025\104\026\117\027\122\032\063\033\071\001\001\000" +
    "\016\024\176\025\104\026\117\027\122\032\063\033\071" +
    "\001\001\000\016\024\175\025\104\026\117\027\122\032" +
    "\063\033\071\001\001\000\016\024\174\025\104\026\117" +
    "\027\122\032\063\033\071\001\001\000\016\024\173\025" +
    "\104\026\117\027\122\032\063\033\071\001\001\000\016" +
    "\024\171\025\104\026\117\027\122\032\063\033\071\001" +
    "\001\000\016\024\170\025\104\026\117\027\122\032\063" +
    "\033\071\001\001\000\002\001\001\000\016\024\165\025" +
    "\104\026\117\027\122\032\063\033\071\001\001\000\002" +
    "\001\001\000\016\024\156\025\104\026\117\027\122\032" +
    "\063\033\071\001\001\000\016\024\155\025\104\026\117" +
    "\027\122\032\063\033\071\001\001\000\016\024\154\025" +
    "\104\026\117\027\122\032\063\033\071\001\001\000\016" +
    "\024\153\025\104\026\117\027\122\032\063\033\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\024\126\025\104\026\117\027\122\030\163\032\063" +
    "\033\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\167\025\104" +
    "\026\117\027\122\032\063\033\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\024\126\025\104\026\117\027\122\030\215\032\063" +
    "\033\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\220\025\104\026\117\027\122" +
    "\032\063\033\071\001\001\000\002\001\001\000\022\010" +
    "\222\022\223\024\056\025\104\026\054\027\107\032\063" +
    "\033\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\222\022\225\024\056\025\104\026\054\027\107" +
    "\032\063\033\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\024\230\025\104\026\117\027\122\032\063" +
    "\033\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\062\021\212\022" +
    "\111\023\077\024\056\025\104\026\054\027\107\032\063" +
    "\033\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\244\025\104\026\117\027\122" +
    "\032\063\033\071\001\001\000\002\001\001\000\022\010" +
    "\222\022\246\024\056\025\104\026\054\027\107\032\063" +
    "\033\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\253\025\104" +
    "\026\117\027\122\032\063\033\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\047\014\260\001\001\000\002\001\001\000" +
    "\006\010\047\014\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\047\014\045\016\051" +
    "\017\271\034\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\010\062\020\275\021\112\022\111\023\077" +
    "\024\056\025\104\026\054\027\107\032\063\033\071\001" +
    "\001\000\002\001\001\000\026\010\062\021\212\022\111" +
    "\023\077\024\056\025\104\026\054\027\107\032\063\033" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\047" +
    "\014\045\016\051\017\307\034\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\062\020\313\021\112" +
    "\022\111\023\077\024\056\025\104\026\054\027\107\032" +
    "\063\033\071\001\001\000\002\001\001\000\026\010\062" +
    "\021\212\022\111\023\077\024\056\025\104\026\054\027" +
    "\107\032\063\033\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/* this list contains a list of Syntax Errors that were found during parsing */
	public List<SyntaxError> errors = new ArrayList<SyntaxError>();

	/* handle syntax error */
	public void syntax_error(Symbol cur_token) {

	    /* notify the compiler that an error has occured, and set the error list */
	    IC.Compiler.SetSyntaxErrors(errors);
		
		/* bugged method */
		expected_token_ids(); expected_token_ids(); expected_token_ids();
		List<Integer> lst_tokens = expected_token_ids();
		
		/* add the new error */
		errors.add(new SyntaxError((Token)cur_token, lst_tokens));
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws SyntaxError
	{
		/* we could not handle error recovery, throw a Syntax Error exception */
		throw errors.get(0);
	}
	



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              Program RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ICClass> lst = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(lst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= empty 
            {
              Program RESULT =null;
		 RESULT = new Program(new ArrayList<ICClass>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= icclass 
            {
              List<ICClass> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<ICClass>();
	   RESULT.add(c); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= class_list icclass 
            {
              List<ICClass> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ICClass> lst = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(c); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // icclass ::= CLASS CLASSID extends_opt CLP fields_methods_list CRP 
            {
              ICClass RESULT =null;
		int class_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int class_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token class_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String superclass = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> lst = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 /* with a given method\field list */
		List<Field> fields = new ArrayList<Field>();
		List<Method> methods = new ArrayList<Method>();
		for(ASTNode item : lst)
		{
			if(item instanceof Field)
				fields.add((Field)item);
			else
				methods.add((Method)item);
		}
		if(superclass == null)
			RESULT = new ICClass( class_token.getLine(), (String)class_token.getValue(), fields, methods);
		else
			RESULT = new ICClass( class_token.getLine(), (String)class_token.getValue(), superclass, fields, methods);
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("icclass",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // icclass ::= CLASS CLASSID extends_opt CLP CRP 
            {
              ICClass RESULT =null;
		int class_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int class_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token class_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String superclass = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  /* empty class */
		List<Field> fields = new ArrayList<Field>();
		List<Method> methods = new ArrayList<Method>();
		if(superclass == null)
			RESULT = new ICClass( class_token.getLine(), (String)class_token.getValue(), fields, methods);
		else
			RESULT = new ICClass( class_token.getLine(), (String)class_token.getValue(), superclass, fields, methods);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("icclass",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // icclass ::= error CLASS 
            {
              ICClass RESULT =null;
		
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("icclass",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fields_methods_list ::= method 
            {
              List<ASTNode> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new ArrayList<ASTNode>();
		RESULT.add(m);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields_methods_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fields_methods_list ::= fields_methods_list method 
            {
              List<ASTNode> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> lst = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lst.add(m);
		RESULT = lst;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields_methods_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fields_methods_list ::= field_collection 
            {
              List<ASTNode> RESULT =null;
		int field_colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int field_colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Field> field_col = (List<Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new ArrayList<ASTNode>();
		for(Field field : field_col)
		{
			RESULT.add(field);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields_methods_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fields_methods_list ::= fields_methods_list field_collection 
            {
              List<ASTNode> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> lst = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int field_colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int field_colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Field> field_col = (List<Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = lst;
		for(Field field: field_col)
		{
			lst.add(field);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields_methods_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // field_collection ::= type ID field_id_list SEMCOL 
            {
              List<Field> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> lst = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = new ArrayList<Field>();
		
		// add the first field
		RESULT.add(new Field(t, (String)id_token.getValue()));     
		
		// add the rest of the fields (same type)
		for(String n : lst)
		{
			RESULT.add(new Field(t, n));
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_collection",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // field_collection ::= type ID SEMCOL 
            {
              List<Field> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = new ArrayList<Field>();
		RESULT.add(new Field(t, (String)id_token.getValue()));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_collection",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // field_collection ::= error type 
            {
              List<Field> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_collection",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // field_id_list ::= COMMA ID 
            {
              List<String> RESULT =null;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<String>();
	   RESULT.add((String)id_token.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_id_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // field_id_list ::= field_id_list COMMA ID 
            {
              List<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> lst = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lst; RESULT.add((String)id_token.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_id_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // extends_opt ::= empty 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_opt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // extends_opt ::= EXTENDS CLASSID 
            {
              String RESULT =null;
		int class_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int class_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token class_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)class_token.getValue(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extends_opt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              Type RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType( line, DataTypes.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= BOOL 
            {
              Type RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType( line, DataTypes.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= STRING 
            {
              Type RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType( line, DataTypes.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= CLASSID 
            {
              Type RESULT =null;
		int class_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int class_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token class_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UserType( class_token.getLine(), (String)class_token.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= type SQUARELB SQUARERB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = t; RESULT.incrementDimension(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // return_type ::= type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // return_type ::= VOID 
            {
              Type RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType( line , DataTypes.VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method ::= STATIC return_type ID LP formal_list_opt RP CLP stmt_lst CRP 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		/* static method with statement list*/
		RESULT = new StaticMethod(t, (String)id_token.getValue(), formals, stmts);
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method ::= type ID LP formal_list_opt RP CLP stmt_lst CRP 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		/* virtual method, non void, method with statement list */
			RESULT = new VirtualMethod(t, (String)id_token.getValue(), formals, stmts);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method ::= VOID ID LP formal_list_opt RP CLP stmt_lst CRP 
            {
              Method RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		/* void virtual method with statement list */
		RESULT = new VirtualMethod(new PrimitiveType(line, DataTypes.VOID), (String)id_token.getValue(), formals, stmts);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method ::= type ID LP formal_list_opt RP CLP CRP 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		/* non void virtual method without statement list */
		RESULT = new VirtualMethod(t, (String)id_token.getValue(), formals, new ArrayList<Statement>());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method ::= VOID ID LP formal_list_opt RP CLP CRP 
            {
              Method RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		/* void virtual method without statement list */
		RESULT = new VirtualMethod(new PrimitiveType( line, DataTypes.VOID),(String)id_token.getValue(), formals, new ArrayList<Statement>());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // method ::= STATIC return_type ID LP formal_list_opt RP CLP CRP 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
		/* static method without statement list */
		RESULT = new StaticMethod(t, (String)id_token.getValue(), formals, new ArrayList<Statement>());
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method ::= error CRP STATIC 
            {
              Method RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method ::= error CRP type 
            {
              Method RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // formal ::= type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formal(t, (String)id_token.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comma_formal_list ::= COMMA formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Formal>(); RESULT.add(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_formal_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comma_formal_list ::= comma_formal_list COMMA formal 
            {
              List<Formal> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Formal> lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(f); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_formal_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // formal_list ::= formal comma_formal_list 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Formal> lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Formal>();
	   RESULT.add(f);
	   for(Formal formal : lst)
	   {
	   		RESULT.add(formal);
	   }
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // formal_list ::= formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new ArrayList<Formal>(); RESULT.add(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // formal_list_opt ::= formal_list 
            {
              List<Formal> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Formal> lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list_opt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formal_list_opt ::= empty 
            {
              List<Formal> RESULT =null;
		 RESULT = new ArrayList<Formal>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_list_opt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt_lst ::= stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Statement>(); RESULT.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_lst",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt_lst ::= stmt_lst stmt 
            {
              List<Statement> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> lst = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(s); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_lst",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= stmt_no_dec 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= dec 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LocalVariable d = (LocalVariable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= error SEMCOL 
            {
              Statement RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt_no_dec ::= location ASSIGN expr SEMCOL 
            {
              Statement RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(loc, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt_no_dec ::= call SEMCOL 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallStatement(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt_no_dec ::= RETURN expr SEMCOL 
            {
              Statement RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(line, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt_no_dec ::= RETURN SEMCOL 
            {
              Statement RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(line); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt_no_dec ::= IF LP expr RP stmt_no_dec ELSE stmt_no_dec 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement st1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(exp, st1, st2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt_no_dec ::= IF LP expr RP stmt_no_dec 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(exp,st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt_no_dec ::= WHILE LP expr RP stmt_no_dec 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(exp , st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt_no_dec ::= BREAK SEMCOL 
            {
              Statement RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Break( line ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt_no_dec ::= CONTINUE SEMCOL 
            {
              Statement RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Continue( line );  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt_no_dec ::= CLP stmt_lst CRP 
            {
              Statement RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> statements = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StatementsBlock(line ,statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt_no_dec ::= CLP CRP 
            {
              Statement RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StatementsBlock(line, new ArrayList<Statement>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt_no_dec ::= type ID ASSIGN expr SEMCOL 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LocalVariable(t, (String)id_token.getValue(), exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_no_dec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec ::= type ID SEMCOL 
            {
              LocalVariable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LocalVariable(t, (String)id_token.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= INTEGER 
            {
              Literal RESULT =null;
		int integer_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integer_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token integer_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(integer_token.getLine(),LiteralTypes.INTEGER, (Integer)integer_token.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= STRING_LITERAL 
            {
              Literal RESULT =null;
		int str_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int str_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token str_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(str_token.getLine(),LiteralTypes.STRING, (String)str_token.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= FALSE 
            {
              Literal RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(line,LiteralTypes.FALSE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= NULL 
            {
              Literal RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(line,LiteralTypes.NULL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= TRUE 
            {
              Literal RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(line, LiteralTypes.TRUE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= location 
            {
              Expression RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = loc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= call 
            {
              Expression RESULT =null;
		int call_expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int call_expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call call_exp = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = call_exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= THIS 
            {
              Expression RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer line = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new This(line); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= NEW CLASSID LP RP 
            {
              Expression RESULT =null;
		int class_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int class_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token class_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewClass(class_token.getLine(), (String)class_token.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= NEW type SQUARELB expr SQUARERB 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(t, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr DOT LENGTH 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Length(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr ADD expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new MathBinaryOp(exp_1, BinaryOps.PLUS, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new MathBinaryOp(exp_1, BinaryOps.MINUS, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new MathBinaryOp(exp_1, BinaryOps.MULTIPLY, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new MathBinaryOp(exp_1, BinaryOps.DIVIDE, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr MOD expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new MathBinaryOp(exp_1, BinaryOps.MOD, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr LESSTHAN expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.LT, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr LESSTHANEQ expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.LTE, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr GREATERTHAN expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.GT, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr GREATERTHANEQ expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.GTE, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.EQUAL, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr NOTEQ expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.NEQUAL, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.LAND, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.LOR, exp_2);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		
			RESULT = new MathUnaryOp(UnaryOps.UMINUS, exp); 

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		
			RESULT = new LogicalUnaryOp(UnaryOps.LNEG, exp); 

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		 RESULT = l;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= LP expr RP 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionBlock(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // location ::= ID 
            {
              Location RESULT =null;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(id_token.getLine(), (String)id_token.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // location ::= expr DOT ID 
            {
              Location RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(id_token.getLine(), exp, (String)id_token.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // location ::= expr SQUARELB expr SQUARERB 
            {
              Location RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression array = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLocation(array, index); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // empty ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // static_call ::= CLASSID DOT ID LP RP 
            {
              StaticCall RESULT =null;
		int class_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int class_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token class_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
				String class_name = (String)class_token.getValue();
				String method_name = (String)id_token.getValue();
				RESULT = new StaticCall(class_token.getLine(), class_name, method_name, new ArrayList<Expression>()); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("static_call",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // static_call ::= CLASSID DOT ID LP exp_list RP 
            {
              StaticCall RESULT =null;
		int class_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int class_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token class_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				String class_name = (String)class_token.getValue();
				String method_name = (String)id_token.getValue();
				RESULT = new StaticCall(class_token.getLine(), class_name, method_name, lst); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("static_call",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // virtual_call ::= expr DOT ID LP exp_list RP 
            {
              VirtualCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				String method_name = (String)id_token.getValue();
				RESULT = new VirtualCall(id_token.getLine(), e, method_name, lst); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtual_call",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // virtual_call ::= ID LP exp_list RP 
            {
              VirtualCall RESULT =null;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				String method_name = (String)id_token.getValue();
			    RESULT = new VirtualCall(id_token.getLine(), null, method_name, lst); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtual_call",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // virtual_call ::= expr DOT ID LP RP 
            {
              VirtualCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
				String method_name = (String)id_token.getValue();
				RESULT = new VirtualCall(id_token.getLine(), e, method_name, new ArrayList<Expression>()); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtual_call",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // virtual_call ::= ID LP RP 
            {
              VirtualCall RESULT =null;
		int id_tokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_tokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id_token = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
				String method_name = (String)id_token.getValue();
				RESULT = new VirtualCall(id_token.getLine(), null, method_name, new ArrayList<Expression>()); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtual_call",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // call ::= virtual_call 
            {
              Call RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VirtualCall val = (VirtualCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // call ::= static_call 
            {
              Call RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StaticCall val = (StaticCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exp_list ::= expr 
            {
              List<Expression> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); RESULT.add(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exp_list ::= expr exp_comma_list 
            {
              List<Expression> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			List<Expression> res = new ArrayList<Expression>();
			res.add(exp);
			for(Expression e:lst)
			{
				res.add(e);
			}
			RESULT = res;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exp_comma_list ::= COMMA expr 
            {
              List<Expression> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); RESULT.add(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_comma_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exp_comma_list ::= exp_comma_list COMMA expr 
            {
              List<Expression> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(exp); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_comma_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
